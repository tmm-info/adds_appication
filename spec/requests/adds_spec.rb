 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
 before_action :authenticate_user!, except: :index
 load_and_authorize_resource except: :index

 RSpec.describe '/adds', type: :request do
   
   # Add. As you add validations to Add, be sure to
   # adjust the attributes here as well.
   let(:valid_attributes) {
     skip('Add a hash of attributes valid for your model')
   }

   let(:invalid_attributes) {
     skip('Add a hash of attributes invalid for your model')
   }

   describe 'GET /index' do
     it 'renders a successful response' do
       Add.create! valid_attributes
       get adds_url
       expect(response).to be_successful
     end
   end

   describe 'GET /show' do
     it 'renders a successful response' do
       add = Add.create! valid_attributes
       get add_url(add)
       expect(response).to be_successful
     end
   end

   describe 'GET /new' do
     it 'renders a successful response' do
       get new_add_url
       expect(response).to be_successful
     end
   end

   describe 'GET /edit' do
     it 'render a successful response' do
       add = Add.create! valid_attributes
       get edit_add_url(add)
       expect(response).to be_successful
     end
   end

   describe 'POST /create' do
     context 'with valid parameters' do
       it 'creates a new Add' do
         expect {
           post adds_url, params: { add: valid_attributes }
         }.to change(Add, :count).by(1)
       end

       it 'redirects to the created add' do
         post adds_url, params: { add: valid_attributes }
         expect(response).to redirect_to(add_url(Add.last))
       end
     end

     context 'with invalid parameters' do
       it 'does not create a new Add' do
         expect {
           post adds_url, params: { add: invalid_attributes }
         }.to change(Add, :count).by(0)
       end

       it "renders a successful response (i.e. to display the 'new' template)" do
         post adds_url, params: { add: invalid_attributes }
         expect(response).to be_successful
       end
     end
   end

   describe 'PATCH /update' do
     context 'with valid parameters' do
       let(:new_attributes) {
         skip('Add a hash of attributes valid for your model')
       }

       it 'updates the requested add' do
         add = Add.create! valid_attributes
         patch add_url(add), params: { add: new_attributes }
         add.reload
         skip('Add assertions for updated state')
       end

       it 'redirects to the add' do
         add = Add.create! valid_attributes
         patch add_url(add), params: { add: new_attributes }
         add.reload
         expect(response).to redirect_to(add_url(add))
       end
     end

     context 'with invalid parameters' do
       it "renders a successful response (i.e. to display the 'edit' template)" do
         add = Add.create! valid_attributes
         patch add_url(add), params: { add: invalid_attributes }
         expect(response).to be_successful
       end
     end
   end

   describe 'DELETE /destroy' do
     it 'destroys the requested add' do
       add = Add.create! valid_attributes
       expect {
         delete add_url(add)
       }.to change(Add, :count).by(-1)
     end

     it 'redirects to the adds list' do
       add = Add.create! valid_attributes
       delete add_url(add)
       expect(response).to redirect_to(adds_url)
     end
   end
 end
